type: edu
custom_name: stage4
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import contacts.Main;\nimport org.hyperskill.hstest.stage.StageTest;\nimport\
    \ org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testcase.TestCase;\n\
    \nimport java.util.List;\nimport java.util.function.Function;\n\n\nclass TestClue\
    \ {\n\n    Function<String, CheckResult> callback;\n\n    TestClue(Function<String,\
    \ CheckResult> callback) {\n        this.callback = callback;\n    }\n}\n\n\n\
    public class ContactsTest extends StageTest<TestClue> {\n\n    public ContactsTest()\
    \ {\n        super(Main.class);\n    }\n    private CheckResult splitActionsFeedback(int\
    \ actualSize, int needSize) {\n        if (actualSize < needSize) {\n        \
    \    return CheckResult.wrong(String.format(\"This test should contain at least\
    \ %d actions, but you have only %d. \" +\n                            \"You should\
    \ separate your actions with an empty line.\",\n                    needSize,\n\
    \                    actualSize));\n        } else {\n            return null;\n\
    \        }\n    }\n    \n    @Override\n    public List<TestCase<TestClue>> generate()\
    \ {\n        return List.of (\n            new TestCase<TestClue>()\n        \
    \        .setInput(\"exit\")\n                .setAttach(new TestClue(output ->\
    \ {\n                    output = output.strip().toLowerCase();\n            \
    \        if (!output.contains(\"enter action\")) {\n                        return\
    \ new CheckResult(false,\n                            \"No \\\"Enter action\\\"\
    \ substring found in the output\");\n                    }\n                 \
    \   return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"count\\n\" +\n            \
    \        \"exit\")\n                .setAttach(new TestClue(output -> {\n    \
    \                output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"0 records\")) {\n                        return new CheckResult(false,\n\
    \                            \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    }\n\
    \                }\n                return new CheckResult(false,\n          \
    \              \"Search by phone number is not working\");\n            }))\n\
    \        );\n    }\n\n    @Override\n    public CheckResult check(String reply,\
    \ TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/Actions.java
  visible: true
  text: |-
    package contacts;

    import java.util.ArrayList;
    import java.util.Scanner;

    public class Actions {
        private ArrayList<Record> phoneBook = new ArrayList<>();
        public void menu() {
            String command;
            do {
                System.out.println("Enter action (add, remove, edit, count, info, exit):");
                command = new Scanner(System.in).next();
                if (command.equals("add")) {
                    add();
                } else if (command.equals("remove")) {
                    remove();
                } else if (command.equals("edit")) {
                    edit();
                } else if (command.equals("count")) {
                    count();
                } else if (command.equals("info")) {
                    info();
                }
            } while(!command.equals("exit"));
        }

        public void add () {
            System.out.println("Enter the type (person, organization):");
            String type = new Scanner(System.in).next();
            Record record;

            switch (type) {
                case "person":
                    record = new Person();
                    phoneBook.add(record);
                    break;
                case "organization":
                    record = new Organization();
                    phoneBook.add(record);
                    break;
            }
            System.out.println("The record added.\n");
        }

        public void remove () {
            if (phoneBook.size() != 0) {
                for (int i = 0; i < phoneBook.size(); i++) {
                    System.out.println((i + 1) + ". " + phoneBook.get(i));
                }
                System.out.println("Select a record:");
                int select = new Scanner(System.in).nextInt();
                phoneBook.remove(select - 1);
                System.out.println("The record removed!\n");
            } else {
                System.out.println("No records to remove!");
            }
        }

        public void edit () {
            if (phoneBook.size() != 0) {
                for (int i = 0; i < phoneBook.size(); i++) {
                    System.out.println((i + 1) + ". " + phoneBook.get(i));
                }
                System.out.println("Select a record:");
                int select = new Scanner(System.in).nextInt();
                boolean isPerson = phoneBook.get(select - 1).getClass() == Person.class;
                if (isPerson) {
                    System.out.println("Select a field (name, surname, birth date, gender, number):");
                    String element = new Scanner(System.in).nextLine();
                    if (element.equals("name")) {
                        System.out.println("Enter name:");
                        phoneBook.get(select - 1).setName(new Scanner(System.in).next());
                    } else if (element.equals("surname")) {
                        System.out.println("Enter surname:");
                        phoneBook.get(select - 1).setSurname(new Scanner(System.in).next());
                    } else if (element.equals("number")) {
                        System.out.println("Enter number:");
                        phoneBook.get(select - 1).setPhoneNumber(new Scanner(System.in).nextLine());
                    } else if (element.equals("gender")) {
                        System.out.println("Enter the gender (M, F):");
                        phoneBook.get(select - 1).setGender(new Scanner(System.in).nextLine());
                    } else if (element.equals("birth date")) {
                        System.out.println("Enter the birth date:");
                        phoneBook.get(select - 1).setBirthDate(new Scanner(System.in).nextLine());
                    }
                } else {
                    System.out.println("Select a field (name, address, number):");
                    String element = new Scanner(System.in).next();
                    if (element.equals("name")) {
                        System.out.println("Enter name:");
                        phoneBook.get(select - 1).setName(new Scanner(System.in).nextLine());
                    } else if (element.equals("address")) {
                        System.out.println("Enter address:");
                        phoneBook.get(select - 1).setAddress(new Scanner(System.in).nextLine());
                    } else if (element.equals("number")) {
                        System.out.println("Enter number:");
                        phoneBook.get(select - 1).setPhoneNumber(new Scanner(System.in).nextLine());
                    }
                }
                phoneBook.get(select -1).setLastEdit();
                System.out.println("The record updated!\n");
                } else {
                System.out.println("No records to edit!");
            }
        }
        public void count () {
            if (phoneBook.size() != 0) {
                System.out.println(phoneBook.size());
            } else {
                System.out.println("The Phone Book has 0 records.");
            }
        }
        public void info () {
            for (int i = 0; i < phoneBook.size(); i++) {
                System.out.println((i + 1) + ". " + phoneBook.get(i));
            }
            System.out.println("Select a record: ");
            int index = new Scanner(System.in).nextInt();
            System.out.println(phoneBook.get(index - 1).getInfo());
        }
    }
  learner_created: true
- name: src/contacts/Record.java
  visible: true
  text: |-
    package contacts;

    import java.time.LocalDateTime;
    import java.util.Scanner;

    class Record {
        String name;
        String phoneNumber;
        LocalDateTime created;
        LocalDateTime lastEdit;

        public void setName(String name) {
            this.name = name;
        }
        public void setSurname(String surname) {
        }
        public void setBirthDate(String birthDate) {
        }
        public void setGender(String gender) {
        }
        public void setCreated(){
            this.created = LocalDateTime.now().withNano(0);
        }
        public void setLastEdit(){
            this.lastEdit = LocalDateTime.now().withNano(0);;
        }
        public void setAddress(String address) {
        }

        public void setPhoneNumber(String phoneNumber) {
            if (!checkNumber(phoneNumber)) {
                this.phoneNumber = "[no number]";
                System.out.println("Wrong number format!");
            } else {
                this.phoneNumber = phoneNumber;
            }
        }

        private boolean checkNumber(String phoneNumber) {
            String regex = "^\\+?(\\w{1,4})?([- ]\\(\\w{2,4}\\)[- ]\\w{2,4}|[- ]\\w{2,4}|[- ]\\(\\w{2,4}\\)|\\(\\w{1,}\\)|[- ]\\w{2,4}[- ]\\(\\w{2,4}\\)|)?([- ]\\w{2,4})?([- ]\\w{2,5})?";
            if (phoneNumber.matches(regex)) {
                return true;
            } else {
                return false;
            }
        }

        public String getInfo() {
            return null;
        }

        @Override
        public String toString() {
            return null;
        }
    }

    class Person extends Record {
        String surname;
        String birthDate;
        String gender;

        public Person() {
            System.out.println("Enter the name of the person:");
            name = new Scanner(System.in).next();
            System.out.println("Enter the surname of the person:");
            surname = new Scanner(System.in).next();
            System.out.println("Enter the birth date:");
            birthDate = new Scanner(System.in).nextLine();
            setBirthDate(birthDate);
            System.out.println("Enter the gender (M, F):");
            gender = new Scanner(System.in).nextLine();
            setGender(gender);
            System.out.println("Enter the number:");
            phoneNumber = new Scanner(System.in).nextLine();
            setPhoneNumber(phoneNumber);
            setCreated();
            setLastEdit();
        }

        @Override
        public void setGender(String gender) {
            if (gender.equals("F") || gender.equals("M")) {
                this.gender = gender;
            } else {
                this.gender = "[no data]";
                System.out.println("Bad gender!");
            }
        }

        public void setBirthDate(String birthDate){
            String regex = "^\\d{4}-\\d{2}-\\d{2}$";
            if (birthDate.matches(regex)) {
                this.birthDate = birthDate;
            } else {
                this.birthDate = "[no data]";
                System.out.println("Bad birth date!");
            }
        }

        @Override
        public void setSurname(String surname) {
            this.surname = surname;
        }

        @Override
        public String toString() {
            return name + " " + surname;
        }

        @Override
        public String getInfo() {
            return "Name: " + name + "\n" +
                    "Surname: " + surname + "\n" +
                    "Birth date: " + birthDate + "\n" +
                    "Gender: " + gender + "\n" +
                    "Number: "+ phoneNumber + "\n" +
                    "Time created: " + created + "\n" +
                    "Time last edit: " + lastEdit+ "\n";
        }
    }

    class Organization extends Record {
        String address;

        public Organization() {
            System.out.println("Enter the name of the organization:");
            name = new Scanner(System.in).nextLine();
            System.out.println("Enter the address:");
            address = new Scanner(System.in).nextLine();
            System.out.println("Enter the number:");
            phoneNumber = new Scanner(System.in).nextLine();
            setPhoneNumber(phoneNumber);
            setCreated();
            setLastEdit();
        }

        public void setAddress(String address) {
            this.address = address;
        }
        @Override
        public String toString() {
            return name;
        }

        @Override
        public String getInfo() {
            return "Organization name: " + name + "\n" +
                    "Address: "+ address + "\n" +
                    "Number: "+ phoneNumber + "\n" +
                    "Time created: " + created + "\n" +
                    "Time last edit: " + lastEdit + "\n";
        }
    }
  learner_created: true
- name: src/contacts/Write.java
  visible: true
  learner_created: true
- name: src/contacts/ReadAndWrite.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/231/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/43/stages/231/implement">JetBrains
    Academy</a>
  time: Tue, 29 Sep 2020 19:47:43 UTC
record: -1
